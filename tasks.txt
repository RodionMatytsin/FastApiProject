# просмотреть товары, просмотреть 1 товар, добавить товар +
# просмотреть корзину, добавить товар в корзину +
# очистка корзины (post), то есть оформить заказ и очистка данных из корзины (post) +
# сделать единобразие кода +
# добавить авторизацию для пользователя, для всех методов добавить куки +
# сделать регистрацию (для каждого user должен быть id) +
# Сделать через куки авторизацию пользователя +
# при входе в систему проверять токен пользователя, если нет такого то добаляем пользователя ... +
# Нужно хранить время жизни токена +
# Для методов login и signup переделать создание и проверку токена. +
# При регистрации у user создается токен, время его жизни и токен сохраняется в списке listToken. +
# При авторизации у user берется созданный токен из списка listToken и проверяется в списке listUsers пользователь. +
# Если у токена время жизни закончилось, то обновляем его в списке. +
# для каждого пользователя сделать свои товары +
# Сделать файл утилиты +

# Команды:
# pip freeze > requirements.txt
# pip install Jinja2 --upgrade


# class Test:
#     async def stringify_and_comma_separate(cls, list_):
#         return ', '.join(map(str, list_))
#
#     async def get_result_(cls, select_: list, where_: list, type_: bool = False) -> None | object:
#         async with get_async_session() as session:
#             result = await session.execute(
#                 select(
#                     select_
#                 ).where(
#                     and_(
#                         *where_
#                     )
#                 )
#             )
#             result = result.all() if type_ else result.first()
#         if result is None:
#             return False
#         return [x for x in result] if type_ else result



# async def get_result_(select_: list, where_: list, type_: bool = False):
#     async with get_async_session() as session:
#         result = await session.execute(
#             select(*select_).where(and_(*where_))
#         )
#         result = result.all() if type_ else result.first()
#     if result is None:
#         return False
#     return [x for x in result] if type_ else result




@classmethod
    async def get_user_(cls, username_: str = None, password_: str = None,
                        email_: str = None, user_id_: int = None) -> bool | object:
        where_ = []
        if username_ is not None:
            where_.append(cls.username == username_)
        if password_ is not None:
            where_.append(cls.password == password_)
        if email_ is not None:
            where_.append(cls.email == email_)
        if user_id_ is not None:
            where_.append(cls.id == user_id_)

        async with get_async_session() as session:
            user = await session.execute(
                select(
                    cls.id,
                    cls.username,
                    cls.email,
                    cls.password
                ).where(
                    and_(
                        *where_
                    )
                )
            )
            user = user.first()
        if user is None:
            return False
        return user